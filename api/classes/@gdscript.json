{"name":"@GDScript","parent":"Top","comment":"Built-in GDScript functions.","des":"","const":[{"name":"PI","value":"3.141593"},{"name":"TAU","value":"6.283185"},{"name":"INF","value":"inf"},{"name":"NAN","value":"nan"}],"enums":[],"props":[],"setters":[],"getters":[],"methods":[{"name":"Color8","fun":" Color Color8(int r8,int g8,int b8,int a8=255)"},{"name":"ColorN","fun":" Color ColorN(String name,float alpha=1.0)"},{"name":"abs","fun":" float abs(float s)"},{"name":"acos","fun":" float acos(float s)"},{"name":"asin","fun":" float asin(float s)"},{"name":"assert","fun":" void assert(bool condition,String message=&quot;&quot;)"},{"name":"atan","fun":" float atan(float s)"},{"name":"atan2","fun":" float atan2(float y,float x)"},{"name":"bytes2var","fun":" Variant bytes2var(PoolByteArray bytes,bool allow_objects=false)"},{"name":"cartesian2polar","fun":" Vector2 cartesian2polar(float x,float y)"},{"name":"ceil","fun":" float ceil(float s)"},{"name":"char","fun":" String char(int code)"},{"name":"clamp","fun":" float clamp(float value,float min,float max)"},{"name":"convert","fun":" Variant convert(Variant what,int type)"},{"name":"cos","fun":" float cos(float s)"},{"name":"cosh","fun":" float cosh(float s)"},{"name":"db2linear","fun":" float db2linear(float db)"},{"name":"decimals","fun":" int decimals(float step)"},{"name":"dectime","fun":" float dectime(float value,float amount,float step)"},{"name":"deg2rad","fun":" float deg2rad(float deg)"},{"name":"dict2inst","fun":" Object dict2inst(Dictionary dict)"},{"name":"ease","fun":" float ease(float s,float curve)"},{"name":"exp","fun":" float exp(float s)"},{"name":"floor","fun":" float floor(float s)"},{"name":"fmod","fun":" float fmod(float a,float b)"},{"name":"fposmod","fun":" float fposmod(float a,float b)"},{"name":"funcref","fun":" FuncRef funcref(Object instance,String funcname)"},{"name":"get_stack","fun":" Array get_stack()"},{"name":"hash","fun":" int hash(Variant var)"},{"name":"inst2dict","fun":" Dictionary inst2dict(Object inst)"},{"name":"instance_from_id","fun":" Object instance_from_id(int instance_id)"},{"name":"inverse_lerp","fun":" float inverse_lerp(float from,float to,float weight)"},{"name":"is_equal_approx","fun":" bool is_equal_approx(float a,float b)"},{"name":"is_inf","fun":" bool is_inf(float s)"},{"name":"is_instance_valid","fun":" bool is_instance_valid(Object instance)"},{"name":"is_nan","fun":" bool is_nan(float s)"},{"name":"is_zero_approx","fun":" bool is_zero_approx(float s)"},{"name":"len","fun":" int len(Variant var)"},{"name":"lerp","fun":" Variant lerp(Variant from,Variant to,float weight)"},{"name":"lerp_angle","fun":" float lerp_angle(float from,float to,float weight)"},{"name":"linear2db","fun":" float linear2db(float nrg)"},{"name":"load","fun":" Resource load(String path)"},{"name":"log","fun":" float log(float s)"},{"name":"max","fun":" float max(float a,float b)"},{"name":"min","fun":" float min(float a,float b)"},{"name":"move_toward","fun":" float move_toward(float from,float to,float delta)"},{"name":"nearest_po2","fun":" int nearest_po2(int value)"},{"name":"ord","fun":" int ord(String char)"},{"name":"parse_json","fun":" Variant parse_json(String json)"},{"name":"polar2cartesian","fun":" Vector2 polar2cartesian(float r,float th)"},{"name":"posmod","fun":" int posmod(int a,int b)"},{"name":"pow","fun":" float pow(float base,float exp)"},{"name":"preload","fun":" Resource preload(String path)"},{"name":"print","fun":"vararg void print()"},{"name":"print_debug","fun":"vararg void print_debug()"},{"name":"print_stack","fun":" void print_stack()"},{"name":"printerr","fun":"vararg void printerr()"},{"name":"printraw","fun":"vararg void printraw()"},{"name":"prints","fun":"vararg void prints()"},{"name":"printt","fun":"vararg void printt()"},{"name":"push_error","fun":" void push_error(String message)"},{"name":"push_warning","fun":" void push_warning(String message)"},{"name":"rad2deg","fun":" float rad2deg(float rad)"},{"name":"rand_range","fun":" float rand_range(float from,float to)"},{"name":"rand_seed","fun":" Array rand_seed(int seed)"},{"name":"randf","fun":" float randf()"},{"name":"randi","fun":" int randi()"},{"name":"randomize","fun":" void randomize()"},{"name":"range","fun":"vararg Array range()"},{"name":"range_lerp","fun":" float range_lerp(float value,float istart,float istop,float ostart,float ostop)"},{"name":"round","fun":" float round(float s)"},{"name":"seed","fun":" void seed(int seed)"},{"name":"sign","fun":" float sign(float s)"},{"name":"sin","fun":" float sin(float s)"},{"name":"sinh","fun":" float sinh(float s)"},{"name":"smoothstep","fun":" float smoothstep(float from,float to,float s)"},{"name":"sqrt","fun":" float sqrt(float s)"},{"name":"step_decimals","fun":" int step_decimals(float step)"},{"name":"stepify","fun":" float stepify(float s,float step)"},{"name":"str","fun":"vararg String str()"},{"name":"str2var","fun":" Variant str2var(String string)"},{"name":"tan","fun":" float tan(float s)"},{"name":"tanh","fun":" float tanh(float s)"},{"name":"to_json","fun":" String to_json(Variant var)"},{"name":"type_exists","fun":" bool type_exists(String type)"},{"name":"typeof","fun":" int typeof(Variant what)"},{"name":"validate_json","fun":" String validate_json(String json)"},{"name":"var2bytes","fun":" PoolByteArray var2bytes(Variant var,bool full_objects=false)"},{"name":"var2str","fun":" String var2str(Variant var)"},{"name":"weakref","fun":" WeakRef weakref(Object obj)"},{"name":"wrapf","fun":" float wrapf(float value,float min,float max)"},{"name":"wrapi","fun":" int wrapi(int value,int min,int max)"},{"name":"yield","fun":" GDScriptFunctionState yield(Object object=null,String signal=&quot;&quot;)"}],"signals":[]}