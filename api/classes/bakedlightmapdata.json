{"name":"BakedLightmapData","parent":"Resource","comment":"","des":"","const":[],"enums":[],"props":[{"name":"bounds","prop":"AABB bounds  = AABB( 0, 0, 0, 0, 0, 0 )","setget":"true"},{"name":"cell_space_transform","prop":"Transform cell_space_transform  = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )","setget":"true"},{"name":"cell_subdiv","prop":"int cell_subdiv  = 1","setget":"true"},{"name":"energy","prop":"float energy  = 1.0","setget":"true"},{"name":"interior","prop":"bool interior  = false","setget":"true"},{"name":"octree","prop":"PoolByteArray octree  = PoolByteArray(  )","setget":"true"}],"setters":["set_bounds(AABB value)","set_cell_space_transform(Transform value)","set_cell_subdiv(int value)","set_energy(float value)","set_interior(bool value)","set_octree(PoolByteArray value)"],"getters":["AABB get_bounds()","Transform get_cell_space_transform()","int get_cell_subdiv()","float get_energy()","bool is_interior()","PoolByteArray get_octree()"],"methods":[{"name":"add_user","fun":" void add_user(NodePath path,Resource lightmap,int lightmap_slice,Rect2 lightmap_uv_rect,int instance)"},{"name":"clear_data","fun":" void clear_data()"},{"name":"clear_users","fun":" void clear_users()"},{"name":"get_user_count","fun":"const int get_user_count()"},{"name":"get_user_lightmap","fun":"const Resource get_user_lightmap(int user_idx)"},{"name":"get_user_path","fun":"const NodePath get_user_path(int user_idx)"}],"signals":[]}