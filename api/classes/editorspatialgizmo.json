{"name":"EditorSpatialGizmo","parent":"SpatialGizmo","comment":"Custom gizmo for editing Spatial objects.","des":"","const":[],"enums":[],"props":[],"setters":[],"getters":[],"methods":[{"name":"add_collision_segments","fun":" void add_collision_segments(PoolVector3Array segments)"},{"name":"add_collision_triangles","fun":" void add_collision_triangles(TriangleMesh triangles)"},{"name":"add_handles","fun":" void add_handles(PoolVector3Array handles,Material material,bool billboard=false,bool secondary=false)"},{"name":"add_lines","fun":" void add_lines(PoolVector3Array lines,Material material,bool billboard=false,Color modulate=Color( 1, 1, 1, 1 ))"},{"name":"add_mesh","fun":" void add_mesh(Mesh mesh,bool billboard=false,SkinReference skeleton=null,Material material=null)"},{"name":"add_unscaled_billboard","fun":" void add_unscaled_billboard(Material material,float default_scale=1,Color modulate=Color( 1, 1, 1, 1 ))"},{"name":"clear","fun":" void clear()"},{"name":"commit_handle","fun":"virtual void commit_handle(int index,Variant restore,bool cancel=false)"},{"name":"get_handle_name","fun":"virtual String get_handle_name(int index)"},{"name":"get_handle_value","fun":"virtual Variant get_handle_value(int index)"},{"name":"get_plugin","fun":"const EditorSpatialGizmoPlugin get_plugin()"},{"name":"get_spatial_node","fun":"const Spatial get_spatial_node()"},{"name":"is_handle_highlighted","fun":"virtual bool is_handle_highlighted(int index)"},{"name":"redraw","fun":"virtual void redraw()"},{"name":"set_handle","fun":"virtual void set_handle(int index,Camera camera,Vector2 point)"},{"name":"set_hidden","fun":" void set_hidden(bool hidden)"},{"name":"set_spatial_node","fun":" void set_spatial_node(Node node)"}],"signals":[]}