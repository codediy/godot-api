{"name":"Physics2DDirectBodyState","parent":"Object","comment":"Direct access object to a physics body in the [Physics2DServer].","des":"","const":[],"enums":[],"props":[{"name":"angular_velocity","prop":"float angular_velocity  ","setget":"true"},{"name":"inverse_inertia","prop":"float inverse_inertia  ","setget":"true"},{"name":"inverse_mass","prop":"float inverse_mass  ","setget":"true"},{"name":"linear_velocity","prop":"Vector2 linear_velocity  ","setget":"true"},{"name":"sleeping","prop":"bool sleeping  ","setget":"true"},{"name":"step","prop":"float step  ","setget":"true"},{"name":"total_angular_damp","prop":"float total_angular_damp  ","setget":"true"},{"name":"total_gravity","prop":"Vector2 total_gravity  ","setget":"true"},{"name":"total_linear_damp","prop":"float total_linear_damp  ","setget":"true"},{"name":"transform","prop":"Transform2D transform  ","setget":"true"}],"setters":["set_angular_velocity(float value)","set_linear_velocity(Vector2 value)","set_sleep_state(bool value)","set_transform(Transform2D value)"],"getters":["float get_angular_velocity()","float get_inverse_inertia()","float get_inverse_mass()","Vector2 get_linear_velocity()","bool is_sleeping()","float get_step()","float get_total_angular_damp()","Vector2 get_total_gravity()","float get_total_linear_damp()","Transform2D get_transform()"],"methods":[{"name":"add_central_force","fun":" void add_central_force(Vector2 force)"},{"name":"add_force","fun":" void add_force(Vector2 offset,Vector2 force)"},{"name":"add_torque","fun":" void add_torque(float torque)"},{"name":"apply_central_impulse","fun":" void apply_central_impulse(Vector2 impulse)"},{"name":"apply_impulse","fun":" void apply_impulse(Vector2 offset,Vector2 impulse)"},{"name":"apply_torque_impulse","fun":" void apply_torque_impulse(float impulse)"},{"name":"get_contact_collider","fun":"const RID get_contact_collider(int contact_idx)"},{"name":"get_contact_collider_id","fun":"const int get_contact_collider_id(int contact_idx)"},{"name":"get_contact_collider_object","fun":"const Object get_contact_collider_object(int contact_idx)"},{"name":"get_contact_collider_position","fun":"const Vector2 get_contact_collider_position(int contact_idx)"},{"name":"get_contact_collider_shape","fun":"const int get_contact_collider_shape(int contact_idx)"},{"name":"get_contact_collider_shape_metadata","fun":"const Variant get_contact_collider_shape_metadata(int contact_idx)"},{"name":"get_contact_collider_velocity_at_position","fun":"const Vector2 get_contact_collider_velocity_at_position(int contact_idx)"},{"name":"get_contact_count","fun":"const int get_contact_count()"},{"name":"get_contact_local_normal","fun":"const Vector2 get_contact_local_normal(int contact_idx)"},{"name":"get_contact_local_position","fun":"const Vector2 get_contact_local_position(int contact_idx)"},{"name":"get_contact_local_shape","fun":"const int get_contact_local_shape(int contact_idx)"},{"name":"get_space_state","fun":" Physics2DDirectSpaceState get_space_state()"},{"name":"get_velocity_at_local_position","fun":"const Vector2 get_velocity_at_local_position(Vector2 local_position)"},{"name":"integrate_forces","fun":" void integrate_forces()"}],"signals":[]}