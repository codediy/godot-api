{"name":"RayCast","parent":"Spatial","comment":"Query the closest object intersecting a ray.","des":"","const":[],"enums":[],"props":[{"name":"cast_to","prop":"Vector3 cast_to  = Vector3( 0, -1, 0 )","setget":"true"},{"name":"collide_with_areas","prop":"bool collide_with_areas  = false","setget":"true"},{"name":"collide_with_bodies","prop":"bool collide_with_bodies  = true","setget":"true"},{"name":"collision_mask","prop":"int collision_mask  = 1","setget":"true"},{"name":"debug_shape_custom_color","prop":"Color debug_shape_custom_color  = Color( 0, 0, 0, 1 )","setget":"true"},{"name":"debug_shape_thickness","prop":"float debug_shape_thickness  = 2.0","setget":"true"},{"name":"enabled","prop":"bool enabled  = false","setget":"true"},{"name":"exclude_parent","prop":"bool exclude_parent  = true","setget":"true"}],"setters":["set_cast_to(Vector3 value)","set_collide_with_areas(bool value)","set_collide_with_bodies(bool value)","set_collision_mask(int value)","set_debug_shape_custom_color(Color value)","set_debug_shape_thickness(float value)","set_enabled(bool value)","set_exclude_parent_body(bool value)"],"getters":["Vector3 get_cast_to()","bool is_collide_with_areas_enabled()","bool is_collide_with_bodies_enabled()","int get_collision_mask()","Color get_debug_shape_custom_color()","float get_debug_shape_thickness()","bool is_enabled()","bool get_exclude_parent_body()"],"methods":[{"name":"add_exception","fun":" void add_exception(Object node)"},{"name":"add_exception_rid","fun":" void add_exception_rid(RID rid)"},{"name":"clear_exceptions","fun":" void clear_exceptions()"},{"name":"force_raycast_update","fun":" void force_raycast_update()"},{"name":"get_collider","fun":"const Object get_collider()"},{"name":"get_collider_shape","fun":"const int get_collider_shape()"},{"name":"get_collision_mask_bit","fun":"const bool get_collision_mask_bit(int bit)"},{"name":"get_collision_normal","fun":"const Vector3 get_collision_normal()"},{"name":"get_collision_point","fun":"const Vector3 get_collision_point()"},{"name":"is_colliding","fun":"const bool is_colliding()"},{"name":"remove_exception","fun":" void remove_exception(Object node)"},{"name":"remove_exception_rid","fun":" void remove_exception_rid(RID rid)"},{"name":"set_collision_mask_bit","fun":" void set_collision_mask_bit(int bit,bool value)"}],"signals":[]}