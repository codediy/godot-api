{"name":"RigidBody","parent":"PhysicsBody","comment":"Physics Body whose position is determined through physics simulation in 3D space.","des":"","const":[],"enums":[{"name":"Mode","value":[{"key":"MODE_RIGID = 0"},{"key":"MODE_STATIC = 1"},{"key":"MODE_CHARACTER = 2"},{"key":"MODE_KINEMATIC = 3"}]}],"props":[{"name":"angular_damp","prop":"float angular_damp  = -1.0","setget":"true"},{"name":"angular_velocity","prop":"Vector3 angular_velocity  = Vector3( 0, 0, 0 )","setget":"true"},{"name":"axis_lock_angular_x","prop":"bool axis_lock_angular_x  = false","setget":"true"},{"name":"axis_lock_angular_y","prop":"bool axis_lock_angular_y  = false","setget":"true"},{"name":"axis_lock_angular_z","prop":"bool axis_lock_angular_z  = false","setget":"true"},{"name":"axis_lock_linear_x","prop":"bool axis_lock_linear_x  = false","setget":"true"},{"name":"axis_lock_linear_y","prop":"bool axis_lock_linear_y  = false","setget":"true"},{"name":"axis_lock_linear_z","prop":"bool axis_lock_linear_z  = false","setget":"true"},{"name":"bounce","prop":"float bounce  ","setget":"true"},{"name":"can_sleep","prop":"bool can_sleep  = true","setget":"true"},{"name":"contact_monitor","prop":"bool contact_monitor  = false","setget":"true"},{"name":"contacts_reported","prop":"int contacts_reported  = 0","setget":"true"},{"name":"continuous_cd","prop":"bool continuous_cd  = false","setget":"true"},{"name":"custom_integrator","prop":"bool custom_integrator  = false","setget":"true"},{"name":"friction","prop":"float friction  ","setget":"true"},{"name":"gravity_scale","prop":"float gravity_scale  = 1.0","setget":"true"},{"name":"linear_damp","prop":"float linear_damp  = -1.0","setget":"true"},{"name":"linear_velocity","prop":"Vector3 linear_velocity  = Vector3( 0, 0, 0 )","setget":"true"},{"name":"mass","prop":"float mass  = 1.0","setget":"true"},{"name":"mode","prop":"int mode  = 0","setget":"true"},{"name":"physics_material_override","prop":"PhysicsMaterial physics_material_override  ","setget":"true"},{"name":"sleeping","prop":"bool sleeping  = false","setget":"true"},{"name":"weight","prop":"float weight  = 9.8","setget":"true"}],"setters":["set_angular_damp(float value)","set_angular_velocity(Vector3 value)","set_axis_lock(bool value)","set_axis_lock(bool value)","set_axis_lock(bool value)","set_axis_lock(bool value)","set_axis_lock(bool value)","set_axis_lock(bool value)","set_bounce(float value)","set_can_sleep(bool value)","set_contact_monitor(bool value)","set_max_contacts_reported(int value)","set_use_continuous_collision_detection(bool value)","set_use_custom_integrator(bool value)","set_friction(float value)","set_gravity_scale(float value)","set_linear_damp(float value)","set_linear_velocity(Vector3 value)","set_mass(float value)","set_mode(int value)","set_physics_material_override(PhysicsMaterial value)","set_sleeping(bool value)","set_weight(float value)"],"getters":["float get_angular_damp()","Vector3 get_angular_velocity()","bool get_axis_lock()","bool get_axis_lock()","bool get_axis_lock()","bool get_axis_lock()","bool get_axis_lock()","bool get_axis_lock()","float get_bounce()","bool is_able_to_sleep()","bool is_contact_monitor_enabled()","int get_max_contacts_reported()","bool is_using_continuous_collision_detection()","bool is_using_custom_integrator()","float get_friction()","float get_gravity_scale()","float get_linear_damp()","Vector3 get_linear_velocity()","float get_mass()","int get_mode()","PhysicsMaterial get_physics_material_override()","bool is_sleeping()","float get_weight()"],"methods":[{"name":"_integrate_forces","fun":"virtual void _integrate_forces(PhysicsDirectBodyState state)"},{"name":"add_central_force","fun":" void add_central_force(Vector3 force)"},{"name":"add_force","fun":" void add_force(Vector3 force,Vector3 position)"},{"name":"add_torque","fun":" void add_torque(Vector3 torque)"},{"name":"apply_central_impulse","fun":" void apply_central_impulse(Vector3 impulse)"},{"name":"apply_impulse","fun":" void apply_impulse(Vector3 position,Vector3 impulse)"},{"name":"apply_torque_impulse","fun":" void apply_torque_impulse(Vector3 impulse)"},{"name":"get_axis_lock","fun":"const bool get_axis_lock(int axis)"},{"name":"get_colliding_bodies","fun":"const Array get_colliding_bodies()"},{"name":"get_inverse_inertia_tensor","fun":" Basis get_inverse_inertia_tensor()"},{"name":"set_axis_lock","fun":" void set_axis_lock(PhysicsServer.BodyAxis axis,bool lock)"},{"name":"set_axis_velocity","fun":" void set_axis_velocity(Vector3 axis_velocity)"}],"signals":[{"name":"body_entered","fun":"body_entered(Node body)"},{"name":"body_exited","fun":"body_exited(Node body)"},{"name":"body_shape_entered","fun":"body_shape_entered(RID body_rid,Node body,int body_shape_index,int local_shape_index)"},{"name":"body_shape_exited","fun":"body_shape_exited(RID body_rid,Node body,int body_shape_index,int local_shape_index)"},{"name":"sleeping_state_changed","fun":"sleeping_state_changed()"}]}