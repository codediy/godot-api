{"name":"TileMap","parent":"Node2D","comment":"Node for 2D tile-based maps.","des":"","const":[{"name":"INVALID_CELL","value":"-1"}],"enums":[{"name":"Mode","value":[{"key":"MODE_SQUARE = 0"},{"key":"MODE_ISOMETRIC = 1"},{"key":"MODE_CUSTOM = 2"}]},{"name":"HalfOffset","value":[{"key":"HALF_OFFSET_X = 0"},{"key":"HALF_OFFSET_Y = 1"},{"key":"HALF_OFFSET_DISABLED = 2"},{"key":"HALF_OFFSET_NEGATIVE_X = 3"},{"key":"HALF_OFFSET_NEGATIVE_Y = 4"}]},{"name":"TileOrigin","value":[{"key":"TILE_ORIGIN_TOP_LEFT = 0"},{"key":"TILE_ORIGIN_CENTER = 1"},{"key":"TILE_ORIGIN_BOTTOM_LEFT = 2"}]}],"props":[{"name":"cell_clip_uv","prop":"bool cell_clip_uv  = false","setget":"true"},{"name":"cell_custom_transform","prop":"Transform2D cell_custom_transform  = Transform2D( 64, 0, 0, 64, 0, 0 )","setget":"true"},{"name":"cell_half_offset","prop":"int cell_half_offset  = 2","setget":"true"},{"name":"cell_quadrant_size","prop":"int cell_quadrant_size  = 16","setget":"true"},{"name":"cell_size","prop":"Vector2 cell_size  = Vector2( 64, 64 )","setget":"true"},{"name":"cell_tile_origin","prop":"int cell_tile_origin  = 0","setget":"true"},{"name":"cell_y_sort","prop":"bool cell_y_sort  = false","setget":"true"},{"name":"centered_textures","prop":"bool centered_textures  = false","setget":"true"},{"name":"collision_bounce","prop":"float collision_bounce  = 0.0","setget":"true"},{"name":"collision_friction","prop":"float collision_friction  = 1.0","setget":"true"},{"name":"collision_layer","prop":"int collision_layer  = 1","setget":"true"},{"name":"collision_mask","prop":"int collision_mask  = 1","setget":"true"},{"name":"collision_use_kinematic","prop":"bool collision_use_kinematic  = false","setget":"true"},{"name":"collision_use_parent","prop":"bool collision_use_parent  = false","setget":"true"},{"name":"compatibility_mode","prop":"bool compatibility_mode  = false","setget":"true"},{"name":"mode","prop":"int mode  = 0","setget":"true"},{"name":"occluder_light_mask","prop":"int occluder_light_mask  = 1","setget":"true"},{"name":"show_collision","prop":"bool show_collision  = false","setget":"true"},{"name":"tile_set","prop":"TileSet tile_set  ","setget":"true"}],"setters":["set_clip_uv(bool value)","set_custom_transform(Transform2D value)","set_half_offset(int value)","set_quadrant_size(int value)","set_cell_size(Vector2 value)","set_tile_origin(int value)","set_y_sort_mode(bool value)","set_centered_textures(bool value)","set_collision_bounce(float value)","set_collision_friction(float value)","set_collision_layer(int value)","set_collision_mask(int value)","set_collision_use_kinematic(bool value)","set_collision_use_parent(bool value)","set_compatibility_mode(bool value)","set_mode(int value)","set_occluder_light_mask(int value)","set_show_collision(bool value)","set_tileset(TileSet value)"],"getters":["bool get_clip_uv()","Transform2D get_custom_transform()","int get_half_offset()","int get_quadrant_size()","Vector2 get_cell_size()","int get_tile_origin()","bool is_y_sort_mode_enabled()","bool is_centered_textures_enabled()","float get_collision_bounce()","float get_collision_friction()","int get_collision_layer()","int get_collision_mask()","bool get_collision_use_kinematic()","bool get_collision_use_parent()","bool is_compatibility_mode_enabled()","int get_mode()","int get_occluder_light_mask()","bool is_show_collision_enabled()","TileSet get_tileset()"],"methods":[{"name":"clear","fun":" void clear()"},{"name":"fix_invalid_tiles","fun":" void fix_invalid_tiles()"},{"name":"get_cell","fun":"const int get_cell(int x,int y)"},{"name":"get_cell_autotile_coord","fun":"const Vector2 get_cell_autotile_coord(int x,int y)"},{"name":"get_cellv","fun":"const int get_cellv(Vector2 position)"},{"name":"get_collision_layer_bit","fun":"const bool get_collision_layer_bit(int bit)"},{"name":"get_collision_mask_bit","fun":"const bool get_collision_mask_bit(int bit)"},{"name":"get_used_cells","fun":"const Array get_used_cells()"},{"name":"get_used_cells_by_id","fun":"const Array get_used_cells_by_id(int id)"},{"name":"get_used_rect","fun":" Rect2 get_used_rect()"},{"name":"is_cell_transposed","fun":"const bool is_cell_transposed(int x,int y)"},{"name":"is_cell_x_flipped","fun":"const bool is_cell_x_flipped(int x,int y)"},{"name":"is_cell_y_flipped","fun":"const bool is_cell_y_flipped(int x,int y)"},{"name":"map_to_world","fun":"const Vector2 map_to_world(Vector2 map_position,bool ignore_half_ofs=false)"},{"name":"set_cell","fun":" void set_cell(int x,int y,int tile,bool flip_x=false,bool flip_y=false,bool transpose=false,Vector2 autotile_coord=Vector2( 0, 0 ))"},{"name":"set_cellv","fun":" void set_cellv(Vector2 position,int tile,bool flip_x=false,bool flip_y=false,bool transpose=false)"},{"name":"set_collision_layer_bit","fun":" void set_collision_layer_bit(int bit,bool value)"},{"name":"set_collision_mask_bit","fun":" void set_collision_mask_bit(int bit,bool value)"},{"name":"update_bitmask_area","fun":" void update_bitmask_area(Vector2 position)"},{"name":"update_bitmask_region","fun":" void update_bitmask_region(Vector2 start=Vector2( 0, 0 ),Vector2 end=Vector2( 0, 0 ))"},{"name":"update_dirty_quadrants","fun":" void update_dirty_quadrants()"},{"name":"world_to_map","fun":"const Vector2 world_to_map(Vector2 world_position)"}],"signals":[{"name":"settings_changed","fun":"settings_changed()"}]}